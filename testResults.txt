+ gcc -o main main.c
+ truncate --size=1G FAT.txt
+ sudo mkfs.fat FAT.txt
[sudo] password for ilya: 
mkfs.fat 4.1 (2017-01-24)
+ mkdir fat
+ sudo mount -t vfat FAT.txt fat
+ truncate --size=1G exFAT.txt
+ epm --auto install exfatprogs
 $ sudo -- apt-get -y --force-yes -o APT::Install::VirtualVersion=true -o APT::Install::Virtual=true -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold install exfatprogs
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ sudo mkfs.exfat exFAT.txt
exfatprogs version : 1.0.4
Creating exFAT filesystem(exFAT.txt, cluster size=32768)

Writing volume boot record: done
Writing backup volume boot record: done
Fat table creation: done
Allocation bitmap creation: done
Upcase table creation: done
Writing root directory entry: done
Synchronizing...

exFAT format complete!
+ mkdir exFAT
+ sudo mount -t exfat exFAT.txt exFAT
+ truncate --size=1G ext4.txt
+ sudo mkfs.ext4 ext4.txt
mke2fs 1.45.6 (20-Mar-2020)
Discarding device blocks: done                            
Creating filesystem with 262144 4k blocks and 65536 inodes
Filesystem UUID: 543f6c6e-27ef-4bd4-afe4-c30be716cf44
Superblock backups stored on blocks: 
	32768, 98304, 163840, 229376

Allocating group tables: done                            
Writing inode tables: done                            
Creating journal (8192 blocks): done
Writing superblocks and filesystem accounting information: done

+ mkdir ext4
+ sudo mount -t ext4 ext4.txt ext4
+ truncate --size=1G btrfs.txt
+ epm --auto install btrfs-progs
 $ sudo -- apt-get -y --force-yes -o APT::Install::VirtualVersion=true -o APT::Install::Virtual=true -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold install btrfs-progs
W: --force-yes is deprecated, use one of the options starting with --allow instead.
+ sudo mkfs.btrfs btrfs.txt
btrfs-progs v5.7 
See http://btrfs.wiki.kernel.org for more information.

Label:              (null)
UUID:               536ce68d-2f5f-4f8f-8d40-d771b33012ef
Node size:          16384
Sector size:        4096
Filesystem size:    1.00GiB
Block group profiles:
  Data:             single            8.00MiB
  Metadata:         DUP              51.19MiB
  System:           DUP               8.00MiB
SSD detected:       no
Incompat features:  extref, skinny-metadata
Runtime features:   
Checksum:           crc32c
Number of devices:  1
Devices:
   ID        SIZE  PATH
    1     1.00GiB  btrfs.txt

+ mkdir btrfs
+ sudo mount -t btrfs btrfs.txt btrfs
+ truncate --size=1G ntfs3g.txt
+ epm --auto install ntfs-3g
 $ sudo -- apt-get -y --force-yes -o APT::Install::VirtualVersion=true -o APT::Install::Virtual=true -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold install ntfs-3g
W: --force-yes is deprecated, use one of the options starting with --allow instead.
++ sudo losetup -f
+ blockDevice3g=/dev/loop17
+ sudo losetup /dev/loop17 ntfs3g.txt
+ sudo mkntfs /dev/loop17
The partition start sector was not specified for /dev/loop17 and it could not be obtained automatically.  It has been set to 0.
The number of sectors per track was not specified for /dev/loop17 and it could not be obtained automatically.  It has been set to 0.
The number of heads was not specified for /dev/loop17 and it could not be obtained automatically.  It has been set to 0.
Cluster size has been automatically set to 4096 bytes.
To boot from a device, Windows needs the 'partition start sector', the 'sectors per track' and the 'number of heads' to be set.
Windows will not be able to boot from this device.
Initializing device with zeroes: 100% - Done.
Creating NTFS volume structures.
mkntfs completed successfully. Have a nice day.
+ mkdir ntfs3g
+ sudo mount -t ntfs /dev/loop17 ntfs3g
+ truncate --size=1G ntfs.txt
++ sudo losetup -f
+ blockDevice=/dev/loop18
+ sudo losetup /dev/loop18 ntfs.txt
+ sudo mkntfs /dev/loop18
The partition start sector was not specified for /dev/loop18 and it could not be obtained automatically.  It has been set to 0.
The number of sectors per track was not specified for /dev/loop18 and it could not be obtained automatically.  It has been set to 0.
The number of heads was not specified for /dev/loop18 and it could not be obtained automatically.  It has been set to 0.
Cluster size has been automatically set to 4096 bytes.
To boot from a device, Windows needs the 'partition start sector', the 'sectors per track' and the 'number of heads' to be set.
Windows will not be able to boot from this device.
Initializing device with zeroes: 100% - Done.
Creating NTFS volume structures.
mkntfs completed successfully. Have a nice day.
+ mkdir ntfs
+ epm --auto remove ntfs-3g
 $ sudo -- dpkg -P ntfs-3g
+ sudo mount -t ntfs /dev/loop18 ntfs
+ truncate --size=1G zfs.txt
+ epm --auto install zfsutils-linux
 $ sudo -- apt-get -y --force-yes -o APT::Install::VirtualVersion=true -o APT::Install::Virtual=true -o Dpkg::Options::=--force-confdef -o Dpkg::Options::=--force-confold install zfsutils-linux
W: --force-yes is deprecated, use one of the options starting with --allow instead.
++ sudo losetup -f
+ zfsBlock=/dev/loop19
+ sudo losetup /dev/loop19 zfs.txt
+ sudo zpool create -f zfsTestPool /dev/loop19
+ mkdir zfs
++ pwd
+ sudo zfs set mountpoint=/home/ilya/Desktop/longFileName/zfs zfsTestPool
+ echo -e '\nFAT file system check:'

FAT file system check:
+ ./main fat
tf_type: FAT 0x4d44
tf_namelen: 1530
+ sudo bash testNameLength.sh fat
Maximum FileName length with Latin characters is: 255
Maximum FileName length with Cyrillic characters is: 127
+ sudo umount fat
+ rmdir fat
+ rm FAT.txt
+ echo -e '\nexFAT file system check:'

exFAT file system check:
+ ./main exFAT
tf_type: exFAT 0x2011bab0
tf_namelen: 1530
+ sudo bash testNameLength.sh exFAT
Maximum FileName length with Latin characters is: 255
Maximum FileName length with Cyrillic characters is: 255
+ sudo umount exFAT
+ rmdir exFAT
+ rm exFAT.txt
+ echo -e '\next4 file system check:'

ext4 file system check:
+ ./main ext4
tf_type: EXT4 0xef53
tf_namelen: 255
+ sudo bash testNameLength.sh ext4
Maximum FileName length with Latin characters is: 255
Maximum FileName length with Cyrillic characters is: 127
+ sudo umount ext4
+ rmdir ext4
+ rm ext4.txt
+ echo -e '\nbtrfs file system check:'

btrfs file system check:
+ ./main btrfs
tf_type: BTRFS 0x9123683e
tf_namelen: 255
+ sudo bash testNameLength.sh btrfs
Maximum FileName length with Latin characters is: 255
Maximum FileName length with Cyrillic characters is: 127
+ sudo umount btrfs
+ rmdir btrfs
+ rm btrfs.txt
+ echo -e '\nntfs(FUSE) file system check:'

ntfs(FUSE) file system check:
+ ./main ntfs3g
tf_type: FUSE 0x65735546
tf_namelen: 255
+ sudo bash testNameLength.sh ntfs3g
Maximum FileName length with Latin characters is: 255
Maximum FileName length with Cyrillic characters is: 255
+ sudo umount ntfs3g
+ sudo losetup -d /dev/loop17
+ rmdir ntfs3g
+ rm ntfs3g.txt
+ echo -e '\nntfs(read-only) file system check:'

ntfs(read-only) file system check:
+ ./main ntfs
tf_type: NTFS 0x5346544e
tf_namelen: 255
+ sudo bash testNameLength.sh ntfs
Maximum FileName length with Latin characters is: 0
Maximum FileName length with Cyrillic characters is: 0
+ sudo umount ntfs
+ sudo losetup -d /dev/loop18
+ rmdir ntfs
+ rm ntfs.txt
+ echo -e '\nzfs file system check:'

zfs file system check:
+ ./main zfs
tf_type: ZFS 0x2fc12fc1
tf_namelen: 255
+ sudo bash testNameLength.sh
Maximum FileName length with Latin characters is: 255
Maximum FileName length with Cyrillic characters is: 127
+ sudo zpool destroy zfsTestPool
+ sudo losetup -d /dev/loop19
+ rmdir zfs
+ rm zfs.txt
